name: Windows Build

on:
  push:
    branches:
      - master
      - release_v*
      - particle_check
    tags:
    - '*'
  pull_request:
    
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  SW_PORTAL_LOGIN: ${{ secrets.PORTAL_LOGIN }}
  
jobs:
  build:

    runs-on: windows-latest
    
    steps:

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        lfs: true

    - name: Get tags
      run: git fetch --unshallow origin +refs/tags/*:refs/tags/*

    - name: Get NSIS
      run: curl -o ${{runner.workspace}}\nsis.zip http://www.sci.utah.edu/~amorris/NSISPortable_3.04.zip

    - name: Unzip NSIS
      working-directory: ${{runner.workspace}}
      run: Expand-Archive -LiteralPath nsis.zip -DestinationPath .
      
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: QtCache-windows

    - name: Install Qt
      uses: jurplel/install-qt-action@v2.13.0
      with:
        version: "5.9.9"
        setup-python: 'false'
        cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: Setup Conda
      uses: conda-incubator/setup-miniconda@v2.0.0
      with:
          miniconda-version: 'latest'
          
    - name: Conda info
      run: conda info

    - name: conda installs
      shell: bash -l {0}
      run: source ./install_shapeworks.sh

    - name: conda cleanup
      shell: bash -l {0}
      run: conda clean -p -t

    - name: Cache dependencies
      id: cache-dependencies
      uses: actions/cache@v1
      with:
        path: "C:\\deps"
        key: ${{ runner.os }}-release-${{ hashFiles('**/build_dependencies.sh') }}

    - name: Build dependencies
      shell: bash -l {0}
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: conda activate shapeworks && bash -x ./build_dependencies.sh --install-dir="C:\deps" --build-dir="/c/bdeps" --build-type=$BUILD_TYPE

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory "C:/build"

    - name: Check Disk Space1
      working-directory: ${{runner.workspace}}
      shell: bash -l {0}
      run: df -h
      
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash -l {0}
      working-directory: "C:/build"
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: conda activate shapeworks && cmake $GITHUB_WORKSPACE -DCMAKE_CXX_FLAGS="-FS" -DCMAKE_C_FLAGS="-FS" -DCMAKE_CXX_FLAGS_RELEASE="-FS /Zm250 /Zi /GL /MD /O2 /Ob3 /DNDEBUG /EHsc" -DCMAKE_C_FLAGS_RELEASE="-FS /Zi /GL /MD /O2 /Ob3 /DNDEBUG /EHsc" -DCMAKE_SHARED_LINKER_FLAGS_RELEASE="-LTCG /DEBUG" -DCMAKE_EXE_LINKER_FLAGS_RELEASE="-LTCG /DEBUG" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DVXL_DIR="C:\deps\vxl\build" -DITK_DIR="C:\deps\lib\cmake\ITK-5.0" -DVTK_DIR="C:\deps\lib\cmake\vtk-8.2" -DEigen3_DIR="C:\deps\share\eigen3\cmake" -DXLNT_DIR="C:\deps" -DLIBIGL_DIR="C:\deps" -DJKQTCommonSharedLib_DIR="C:/deps/lib/cmake/JKQTCommonSharedLib" -DJKQTMathTextSharedLib_DIR="C:/deps/lib/cmake/JKQTMathTextSharedLib" -DJKQTPlotterSharedLib_DIR="C:/deps/lib/cmake/JKQTPlotterSharedLib" -DOpenVDB_DIR="C:\deps\lib\cmake\OpenVDB" -DGEOMETRY_CENTRAL_DIR="C:\deps\geometry-central" -DBuild_Studio=ON

    - name: Build
      working-directory: "C:/build"
      shell: bash -l {0}
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: conda activate shapeworks && cmake --build . --config $BUILD_TYPE --parallel

    - name: Check Disk Space2
      working-directory: ${{runner.workspace}}
      shell: bash -l {0}
      run: df -h

    - name: Copy Libraries
      working-directory: "C:/build"
      run: xcopy /f C:\deps\bin\*.dll C:\build\bin\Release

    - name: Build Binary Package
      shell: bash -l {0}
      env:
        PR_NUMBER: ${{ github.event.number }}
      run: conda activate shapeworks && pwd ; ls ; cp docs/users/Windows_README.txt . ; cp Support/shapeworks.nsi . ; conda activate shapeworks && ./Support/package_windows.sh tag

    - name: Check Disk Space3
      working-directory: ${{runner.workspace}}
      shell: bash -l {0}
      run: df -h
      
    - name: Test
      working-directory: "C:/build"
      shell: bash -l {0}
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: conda activate shapeworks && source ${GITHUB_WORKSPACE}/devenv.sh ./bin/Release && ctest --output-on-failure -VV -C $BUILD_TYPE --debug
      
    - uses: actions/upload-artifact@v1
      with:
        name: artifact-${{github.sha}}-windows
        path: ${{runner.workspace}}\ShapeWorks\artifacts

    - name: Check Disk Space4
      working-directory: ${{runner.workspace}}
      shell: bash -l {0}
      run: df -h
        
    - name: Deploy
      if: github.ref == 'refs/heads/master'
      uses: marvinpinto/action-automatic-releases@latest
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "dev-windows"
        prerelease: true
        title: "Development Build for Windows"
        files: |
             d:/a/ShapeWorks/ShapeWorks/artifacts/*.exe
