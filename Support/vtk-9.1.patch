diff --git a/Common/Core/vtkRandomPool.cxx b/Common/Core/vtkRandomPool.cxx
index 46f9aff201..273ca74c50 100644
--- a/Common/Core/vtkRandomPool.cxx
+++ b/Common/Core/vtkRandomPool.cxx
@@ -338,6 +338,9 @@ const double* vtkRandomPool::GeneratePool()
     if (actualThreads < numThreads) // readjust work load
     {
       numThreads = actualThreads;
+      // Alan : Bug fix here, if the number of threads is reduced, then the chunk size
+      // must be increased or the rest of the random numbers won't get filled out
+      seqChunk = (seqSize / numThreads) + 1;
     }
 
     // Now distribute work
diff --git a/Filters/Modeling/vtkSelectEnclosedPoints.cxx b/Filters/Modeling/vtkSelectEnclosedPoints.cxx
index 0dcae6df7a..2986c1e7fd 100644
--- a/Filters/Modeling/vtkSelectEnclosedPoints.cxx
+++ b/Filters/Modeling/vtkSelectEnclosedPoints.cxx
@@ -88,7 +88,10 @@ struct SelectInOutCheck
 
     // Precompute a sufficiently large enough random sequence
     this->Sequence = vtkRandomPool::New();
-    this->Sequence->SetSize((numPts > 1500 ? numPts : 1500));
+    // Alan : I see no reason to ever generate more than 1000 random numbers
+    // each vector will use 3 and only a few vectors for each point
+    // this also works around the bug in vtkRandomPool
+    this->Sequence->SetSize(1000);
     this->Sequence->GeneratePool();
   }
 
@@ -325,7 +328,7 @@ int vtkSelectEnclosedPoints::IsInsideSurface(double x[3])
 // supporting the precomputation of a random sequence (see vtkRandomPool).
 //
 #define VTK_MAX_ITER 10      // Maximum iterations for ray-firing
-#define VTK_VOTE_THRESHOLD 2 // Vote margin for test
+#define VTK_VOTE_THRESHOLD 3 // Vote margin for test
 
 int vtkSelectEnclosedPoints::IsInsideSurface(double x[3], vtkPolyData* surface, double bds[6],
   double length, double tolerance, vtkAbstractCellLocator* locator, vtkIdList* cellIds,
diff --git a/Rendering/OpenGL2/vtkCocoaRenderWindow.mm b/Rendering/OpenGL2/vtkCocoaRenderWindow.mm
index 0d63d49783..82e6b7c57f 100644
--- a/Rendering/OpenGL2/vtkCocoaRenderWindow.mm
+++ b/Rendering/OpenGL2/vtkCocoaRenderWindow.mm
@@ -228,6 +228,16 @@ vtkCocoaRenderWindow::vtkCocoaRenderWindow()
 //----------------------------------------------------------------------------
 vtkCocoaRenderWindow::~vtkCocoaRenderWindow()
 {
+  // If we created a vtkCocoaGLView, clear its reference back to us.
+  if (this->GetViewCreated())
+  {
+    NSView* glView = (NSView*)this->GetWindowId();
+    if ([glView isKindOfClass:[vtkCocoaGLView class]])
+    {
+      [(vtkCocoaGLView*)glView setVTKRenderWindow:nullptr];
+    }
+  }
+
   if (this->CursorHidden)
   {
     this->ShowCursor();
